package ${wrapperHelper.package};

import cn.org.atool.fluent.mybatis.base.model.FieldMapping;
import cn.org.atool.fluent.mybatis.functions.IAggregate;
import cn.org.atool.fluent.mybatis.segment.*;
import ${entityQuery.package}.${entityQuery.name};
import ${entityUpdate.package}.${entityUpdate.name};

/**
 * <p>
 * ${wrapperHelper.name}
 * ${entity.name} 查询更新帮助类
 * </p>
 *
 * @author ${author}
 */
public class ${wrapperHelper.name} implements ${mapping.name} {
    public interface ISegment<R> {
        R set(FieldMapping fieldMapping);
        #foreach($field in ${fields})

        default R ${field.name}() {
            return this.set(${mapping.name}.${field.name});
        }
        #end
    }

    /**
     * select字段设置
     */
    public static final class Selector extends SelectorBase<Selector, ${entityQuery.name}>
        implements ISegment<Selector> {

        public Selector(${entityQuery.name} query) {
            super(query);
        }

        protected Selector(Selector selector, IAggregate aggregate) {
            super(selector, aggregate);
        }

        @Override
        protected Selector aggregateSegment(IAggregate aggregate) {
            return new Selector(this, aggregate);
        }
        /** 别名 **/
        #foreach($field in ${fields})

        public Selector ${field.name}(String alias) {
            return this.process(${field.name}, alias);
        }
        #end
    }

    /**
     * where条件设置
     */
    public static class QueryWhere extends WhereBase<QueryWhere, ${entityQuery.name}, ${entityQuery.name}>
        implements ISegment<WhereApply<QueryWhere, ${entityQuery.name}>> {

        public QueryWhere(${entityQuery.name} query) {
            super(query);
        }

        private QueryWhere(${entityQuery.name} query, QueryWhere where) {
            super(query, where);
        }

        @Override
        protected QueryWhere buildOr(QueryWhere and) {
            return new QueryWhere((${entityQuery.name}) this.wrapper, and);
        }
    }

    /**
     * where条件设置
     */
    public static class UpdateWhere extends WhereBase<UpdateWhere, ${entityUpdate.name}, ${entityQuery.name}>
        implements ISegment<WhereApply<UpdateWhere, ${entityQuery.name}>> {

        public UpdateWhere(${entityUpdate.name} update) {
            super(update);
        }

        private UpdateWhere(${entityUpdate.name} update, UpdateWhere where) {
            super(update, where);
        }

        @Override
        protected UpdateWhere buildOr(UpdateWhere and) {
            return new UpdateWhere((${entityUpdate.name}) this.wrapper, and);
        }
    }

    /**
     * 分组设置
     */
    public static final class GroupBy extends GroupByBase<GroupBy, ${entityQuery.name}>
        implements ISegment<GroupBy> {

        public GroupBy(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * 分组Having条件设置
     */
    public static final class Having extends HavingBase<Having, ${entityQuery.name}>
        implements ISegment<HavingOperator<Having>> {

        public Having(${entityQuery.name} query) {
            super(query);
        }

        protected Having(Having having, IAggregate aggregate) {
            super(having, aggregate);
        }

        @Override
        protected Having aggregateSegment(IAggregate aggregate) {
            return new Having(this, aggregate);
        }
    }

    /**
     * OrderBy设置
     */
    public static final class QueryOrderBy extends OrderByBase<QueryOrderBy, ${entityQuery.name}>
        implements ISegment<OrderByApply<QueryOrderBy, ${entityQuery.name}>> {

        public QueryOrderBy(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * OrderBy设置
     */
    public static final class UpdateOrderBy extends OrderByBase<UpdateOrderBy, ${entityUpdate.name}>
        implements ISegment<OrderByApply<UpdateOrderBy, ${entityUpdate.name}>> {

        public UpdateOrderBy(${entityUpdate.name} updator) {
            super(updator);
        }
    }

    /**
     * 字段更新设置
     */
    public static final class UpdateSetter extends UpdateBase<UpdateSetter, ${entityUpdate.name}>
        implements ISegment<UpdateApply<UpdateSetter, ${entityUpdate.name}>> {

        public UpdateSetter(${entityUpdate.name} update) {
            super(update);
        }
    }
}