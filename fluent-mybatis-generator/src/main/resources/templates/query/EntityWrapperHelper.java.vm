package ${wrapperHelper.package};

import cn.org.atool.fluent.mybatis.condition.apply.*;
import cn.org.atool.fluent.mybatis.condition.base.*;
import ${entity.package}.${entity.name};
import ${mapping.package}.${mapping.name}.Property;
import ${mapping.package}.${mapping.name}.Column;
${importTypes}

/**
 * <p>
 * ${wrapperHelper.name}
 * ${entity.name} 查询更新帮助类
 * </p>
 *
 * @author ${author}
 */
public class ${wrapperHelper.name} {
    /**
     * select字段设置
     */
    public static final class Selector extends BaseSelector<Selector>{
#foreach($field in ${fields})
        public final ColumnSelector<Selector> ${field.name} = new ColumnSelector<>(this, Column.${field.columnName});
#end

        Selector(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * where条件设置
     * @param <W> 更新器或查询器
     */
    public static final class WrapperWhere<W extends Wrapper<${entity.name}, W, ${entityQuery.name}>>
        extends BaseWhere<${entity.name}, W, ${entityQuery.name}> {
#foreach($field in ${fields})
    #if(${field.type}=="String")
        public final WhereString<${entity.name}, W, ${entityQuery.name}> ${field.name} = new WhereString<>(this, Column.${field.columnName}, Property.${field.name});
    #elseif((${field.type}=="Boolean"))
        public final WhereBoolean<${entity.name}, W, ${entityQuery.name}> ${field.name} = new WhereBoolean<>(this, Column.${field.columnName}, Property.${field.name});
    #else
        public final WhereObject<${entity.name}, ${field.type}, W, ${entityQuery.name}> ${field.name} = new WhereObject<>(this, Column.${field.columnName}, Property.${field.name});
    #end
#end

        WrapperWhere(W wrapper) {
            this(wrapper, true);
        }
        WrapperWhere(W wrapper, boolean and) {
            super(wrapper, and);
        }
    }

    /**
     * 分组设置
     */
    public static final class QueryGroup extends BaseGroup<QueryGroup> {
#foreach($field in ${fields})
        public final GroupBy<QueryGroup> ${field.name} = new GroupBy<>(this, Column.${field.columnName});
#end

        QueryGroup(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * 分组Having条件设置
     */
    public static final class Having extends BaseHaving<Having> {
#foreach($field in ${fields})
        public final HavingBy<Having> ${field.name} = new HavingBy<>(this, Column.${field.columnName});
#end

        Having(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * OrderBy设置
     */
    public static final class QueryOrder extends BaseOrder<QueryOrder> {
#foreach($field in ${fields})
        public final OrderBy<QueryOrder> ${field.name} = new OrderBy<>(this, Column.${field.columnName});
#end

        QueryOrder(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * 字段更新设置
     */
    public static final class UpdateSetter extends BaseSetter<${entity.name}, ${entityUpdate.name}> {
#foreach($field in ${fields})
    #if(${field.type}=="String")
        public final SetString<${entityUpdate.name}> ${field.name} = new SetString<>(this, Column.${field.columnName}, Property.${field.name});
    #elseif((${field.type}=="Boolean"))
        public final SetBoolean<${entityUpdate.name}> ${field.name} = new SetBoolean<>(this, Column.${field.columnName}, Property.${field.name});
    #else
        public final SetObject<${field.type}, ${entityUpdate.name}> ${field.name} = new SetObject<>(this, Column.${field.columnName}, Property.${field.name});
    #end
#end

        UpdateSetter(${entityUpdate.name} update) {
            super(update);
        }
    }
}