package ${wrapperHelper.package};

import cn.org.atool.fluent.mybatis.annotation.FieldMeta;
import cn.org.atool.fluent.mybatis.segment.*;
import ${mapping.package}.${mapping.name};

/**
 * <p>
 * ${wrapperHelper.name}
 * ${entity.name} 查询更新帮助类
 * </p>
 *
 * @author ${author}
 */
public class ${wrapperHelper.name} {
    public interface ISegment<R> {
        R set(FieldMeta fieldMeta);
        #foreach($field in ${fields})

        default R ${field.name}() {
            return this.set(${mapping.name}.${field.name});
        }
        #end
    }
    /**
     * select字段设置
     */
    public static final class Selector extends SelectorBase<Selector, ${entityQuery.name}>
        implements ISegment<SelectorApply<Selector, ${entityQuery.name}>> {

        Selector(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * where条件设置
     */
    public static class QueryWhere extends WhereBase<QueryWhere, ${entityQuery.name}, ${entityQuery.name}>
        implements ISegment<WhereApply<QueryWhere, ${entityQuery.name}>> {

        QueryWhere(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * where条件设置
     */
    public static class UpdateWhere extends WhereBase<UpdateWhere, ${entityUpdate.name}, ${entityQuery.name}>
        implements ISegment<WhereApply<UpdateWhere, ${entityQuery.name}>> {

        UpdateWhere(${entityUpdate.name} update) {
            super(update);
        }
    }

    /**
     * 分组设置
     */
    public static final class GroupBy extends GroupByBase<GroupBy, ${entityQuery.name}>
        implements ISegment<GroupBy> {

        GroupBy(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * 分组Having条件设置
     */
    public static final class Having extends HavingBase<Having, ${entityQuery.name}>
        implements ISegment<HavingApply<Having, ${entityQuery.name}>> {

        Having(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * OrderBy设置
     */
    public static final class OrderBy extends OrderByBase<OrderBy, ${entityQuery.name}>
        implements ISegment<OrderBy> {

        OrderBy(${entityQuery.name} query) {
            super(query);
        }
    }

    /**
     * 字段更新设置
     */
    public static final class UpdateSetter extends UpdateBase<UpdateSetter, ${entityUpdate.name}>
        implements ISegment<UpdateApply<UpdateSetter, ${entityUpdate.name}>> {

        UpdateSetter(${entityUpdate.name} update) {
            super(update);
        }
    }
}