package ${entityQuery.package};

import cn.org.atool.fluent.mybatis.base.impl.BaseQuery;
import cn.org.atool.fluent.mybatis.segment.model.ParameterPair;

import ${entity.package}.${entity.name};
import ${mapping.package}.${mapping.name};
import ${wrapperHelper.package}.${wrapperHelper.name}.*;
import cn.org.atool.fluent.mybatis.exception.FluentMybatisException;

import java.util.function.Function;
import static cn.org.atool.fluent.mybatis.utility.MybatisUtil.isNotEmpty;

/**
 * @ClassName ${entityQuery.name}
 * @Description ${entity.name}查询（删除）条件
 *
 * @author ${author}
 */
public class ${entityQuery.name} extends BaseQuery<${entity.name}, ${entityQuery.name}> {
    public final Selector select = new Selector(this);
    /**
     * 分组：GROUP BY 字段, ...
     * 例: groupBy("id", "name")
     */
    public final GroupBy groupBy = new GroupBy(this);
    /**
     * 分组条件设置 having...
     */
    public final Having having = new Having(this);
    /**
     * 排序设置 order by ...
     */
    public final OrderBy orderBy = new OrderBy(this);
    /**
     * 条件设置 where ...
     */
    public final QueryWhere where = new QueryWhere(this);

    public ${entityQuery.name}(){
        super(${mapping.name}.Table_Name, ${entity.name}.class, ${entityQuery.name}.class);
    }

    public ${entityQuery.name}(ParameterPair parameters) {
        super(${mapping.name}.Table_Name, parameters, ${entity.name}.class, ${entityQuery.name}.class);
    }

    @Override
    public ${entityQuery.name} selectId() {
#if(${primaryColumnName})
        return this.select(${mapping.name}.${primaryFieldName}.column);
#else
        throw new FluentMybatisException("The primary key of in table[" + NoPrimaryMP.Table_Name + "] was not found.");
#end
    }

/**
     * 查询字段设置
     *
     * @param by 查询字段设置器
     * @return 查询器${entityQuery.name}
     */
    public ${entityQuery.name} select(Function<Selector, Selector> by){
        by.apply(this.select).toString();
        return this;
    }

    @Override
    public QueryWhere where() {
        return this.where;
    }

    @Override
    protected void validateColumn(String column) throws FluentMybatisException {
        if (isNotEmpty(column) && !${mapping.name}.ALL_COLUMNS.contains(column)) {
            throw new FluentMybatisException("the column[" + column + "] was not found in table[" + ${mapping.name}.Table_Name + "].");
        }
    }
}